buildscript {
        repositories {
                mavenLocal()
                maven {
                        url uri('../libs')
                }
        }
        dependencies {
                classpath 'com.hmel:builder:0.1.2-SNAPSHOT'
        }
}

apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'spring-boot'
apply plugin: 'war'

apply plugin: 'builder'

group = 'com.hmel'
version = '0.0.1'

war {
	baseName = 'myway'
	version = '0.0.1'
}

schema {
        fileUri ="${project.rootDir}/sql-files/"
        fileExtensions = ".sql"
        commentChar = "#"
}
datasource {
        //Load base sql configurations from the database.properties
        def props = new Properties()
	def path =  "${project.rootDir}/myway/src/main/resources/database.properties"
        new File(path ).withInputStream {
                stream -> props.load(stream)
        }
        //Fill schema configs
        login = props["db.username"]
        pswd = props["db.password"]
        url = props["db.url"]
        driver = props["db.driverClassName"]
}

jar {
	baseName = 'myway-api'
}

buildscript{
 	repositories {
 		mavenCentral()
 	}
 	dependencies{
 		classpath "org.springframework.boot:spring-boot-gradle-plugin:1.2.3.RELEASE"
 	}
}

repositories {
	mavenCentral()
	jcenter()
	maven { url "http://repo.spring.io/libs-snapshot" }
}

configurations {
	providedRuntime
}

dependencies {
	compile "org.springframework:spring-web:${springframework.web}"
	compile "org.springframework:spring-orm:${springframework.orm}"
	compile "org.hibernate:hibernate-core:${hibernate.core}"
	compile "org.springframework:spring-aspects:${springframework.aspects}"
	compile "commons-dbcp:commons-dbcp:${commons.dbcp}"
	compile "mysql:mysql-connector-java:${mysql.connectorJava}"
	compile "org.slf4j:slf4j-api:${slf4j.api}"

	testCompile "junit:junit:${junit.junit}"		
	testCompile "org.springframework:spring-test:${springframework.test}"
	testCompile "org.assertj:assertj-core:${assertj.core}"
	
	compile ("org.springframework.boot:spring-boot-starter-web"){
		exclude module:"spring-boot-starter-tomcat"
		exclude module: "spring-boot-starter-logging"
	    	exclude module: "logback-classic"
	}
	compile "org.springframework.boot:spring-boot-starter-jetty"
	compile ("org.springframework.boot:spring-boot-starter-actuator"){
	  exclude module: "logback-classic"
	}
	
	compile "org.springframework.boot:spring-boot-gradle-plugin:${springframework.bookGradlePlugin}"

	providedRuntime "org.springframework.boot:spring-boot-starter-tomcat"	

	compile project (":myway")
	compile project (":myway-interfaces")
}

task wrapper(type:Wrapper){
	gradleVersion='2.4'
}


